"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class Voter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ExtraInfo(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        TITLE_FIELD_NUMBER: builtins.int
        CONTENT_FIELD_NUMBER: builtins.int
        title: builtins.str
        content: builtins.str
        def __init__(
            self,
            *,
            title: builtins.str | None = ...,
            content: builtins.str | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["_content", b"_content", "_title", b"_title", "content", b"content", "title", b"title"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["_content", b"_content", "_title", b"_title", "content", b"content", "title", b"title"]) -> None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_content", b"_content"]) -> typing_extensions.Literal["content"] | None: ...
        @typing.overload
        def WhichOneof(self, oneof_group: typing_extensions.Literal["_title", b"_title"]) -> typing_extensions.Literal["title"] | None: ...

    NAME_FIELD_NUMBER: builtins.int
    EXTRA_INFOS_FIELD_NUMBER: builtins.int
    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    name: builtins.str
    @property
    def extra_infos(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Voter.ExtraInfo]: ...
    public_key: builtins.bytes
    def __init__(
        self,
        *,
        name: builtins.str | None = ...,
        extra_infos: collections.abc.Iterable[global___Voter.ExtraInfo] | None = ...,
        public_key: builtins.bytes | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_name", b"_name", "_public_key", b"_public_key", "name", b"name", "public_key", b"public_key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_name", b"_name", "_public_key", b"_public_key", "extra_infos", b"extra_infos", "name", b"name", "public_key", b"public_key"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_name", b"_name"]) -> typing_extensions.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_public_key", b"_public_key"]) -> typing_extensions.Literal["public_key"] | None: ...

global___Voter = Voter
